// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplicationD.DBContext;

#nullable disable

namespace WebApplicationD.Migrations
{
    [DbContext(typeof(Quality_and_Transport_testContext))]
    [Migration("20240514114645_Init2")]
    partial class Init2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WebApplicationD.Models.CategoriesOfDriverSLicense", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Entity ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("date")
                        .HasColumnName("Date of issue");

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("Driver ID");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("End date");

                    b.HasKey("EntityId")
                        .HasName("PK__Categori__A4F703B38734F5C7");

                    b.HasIndex("DriverId");

                    b.ToTable("Categories of driver's licenses", (string)null);
                });

            modelBuilder.Entity("WebApplicationD.Models.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Driver ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverId"), 1L, 1);

                    b.Property<DateTime>("DateOfIssueOfTheFirstDriverSLicense")
                        .HasColumnType("date")
                        .HasColumnName("Date of issue of the first driver's license");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Email address");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Full name");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("License number");

                    b.Property<string>("LicenseSeries")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("License series");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Phone number");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User ID");

                    b.HasKey("DriverId");

                    b.HasIndex("UserId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("WebApplicationD.Models.DriverStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Status ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("Driver ID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("End date");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("Start date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId")
                        .HasName("PK__Driver s__023FF3718920A92D");

                    b.HasIndex("DriverId");

                    b.ToTable("Driver status", (string)null);
                });

            modelBuilder.Entity("WebApplicationD.Models.EmployeeStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Status ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("Employee ID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("End date");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("Start date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId")
                        .HasName("PK__Employee__023FF371097775C4");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Employee status", (string)null);
                });

            modelBuilder.Entity("WebApplicationD.Models.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Flight ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightId"), 1L, 1);

                    b.Property<DateTime?>("ActualTimeOfDepartureFromTheLine")
                        .HasColumnType("datetime")
                        .HasColumnName("Actual time of departure from the line");

                    b.Property<DateTime?>("ActualTimeToGetOnTheLine")
                        .HasColumnType("datetime")
                        .HasColumnName("Actual time to get on the line");

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("Driver ID");

                    b.Property<int>("RouteId")
                        .HasColumnType("int")
                        .HasColumnName("Route ID");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int")
                        .HasColumnName("Vehicle ID");

                    b.HasKey("FlightId");

                    b.HasIndex("DriverId");

                    b.HasIndex("RouteId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("WebApplicationD.Models.FlightsStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Status ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<DateTime?>("EndDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("End datetime");

                    b.Property<int>("FlightId")
                        .HasColumnType("int")
                        .HasColumnName("Flight ID");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("StartDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("Start datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId")
                        .HasName("PK__Flights __023FF371D506F31D");

                    b.HasIndex("FlightId");

                    b.ToTable("Flights status", (string)null);
                });

            modelBuilder.Entity("WebApplicationD.Models.Passenger", b =>
                {
                    b.Property<int>("PassengerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Passenger ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PassengerId"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("Date of birth");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Email address");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Full name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Phone number");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User ID");

                    b.HasKey("PassengerId");

                    b.HasIndex("UserId");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("WebApplicationD.Models.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Rating ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"), 1L, 1);

                    b.Property<string>("CommentOnTheRating")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Comment on the rating");

                    b.Property<DateTime>("DateOfDispatch")
                        .HasColumnType("date")
                        .HasColumnName("Date of dispatch");

                    b.Property<DateTime?>("DateOfPublication")
                        .HasColumnType("date")
                        .HasColumnName("Date of publication");

                    b.Property<DateTime>("DateOfTheIncident")
                        .HasColumnType("date")
                        .HasColumnName("Date of the incident");

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("Driver ID");

                    b.Property<string>("PassengerFeedback")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Passenger feedback");

                    b.Property<int>("PassengerId")
                        .HasColumnType("int")
                        .HasColumnName("Passenger ID");

                    b.Property<decimal>("PassengerRating")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("Passenger rating");

                    b.Property<string>("PhotoMaterials")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Photo materials");

                    b.Property<bool?>("PublishedEntry")
                        .HasColumnType("bit")
                        .HasColumnName("Published entry");

                    b.Property<int>("ResponsibleEmployee")
                        .HasColumnType("int")
                        .HasColumnName("Responsible employee");

                    b.Property<string>("VideoMaterials")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Video materials");

                    b.HasKey("RatingId");

                    b.HasIndex("DriverId");

                    b.HasIndex("PassengerId");

                    b.HasIndex("ResponsibleEmployee");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("WebApplicationD.Models.RouteStop", b =>
                {
                    b.Property<int>("RouteStopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Route Stop ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RouteStopId"), 1L, 1);

                    b.Property<bool?>("EndPoint")
                        .HasColumnType("bit")
                        .HasColumnName("End point");

                    b.Property<int>("RouteId")
                        .HasColumnType("int")
                        .HasColumnName("Route ID");

                    b.Property<bool?>("StartPoint")
                        .HasColumnType("bit")
                        .HasColumnName("Start point");

                    b.Property<int>("StopId")
                        .HasColumnType("int")
                        .HasColumnName("Stop ID");

                    b.Property<int>("StopOrder")
                        .HasColumnType("int")
                        .HasColumnName("Stop Order");

                    b.HasKey("RouteStopId");

                    b.HasIndex("RouteId");

                    b.HasIndex("StopId");

                    b.ToTable("Route Stops", (string)null);
                });

            modelBuilder.Entity("WebApplicationD.Models.staff", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Employee ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Email address");

                    b.Property<string>("EmployeePosition")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("Employee position");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Full name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Phone number");

                    b.Property<string>("PlaceOfWork")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Place of work");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User ID");

                    b.HasKey("EmployeeId")
                        .HasName("PK__Staff__682EC9E41E3CBB95");

                    b.HasIndex("UserId");

                    b.ToTable("Staff", (string)null);
                });

            modelBuilder.Entity("WebApplicationD.Models.Stop", b =>
                {
                    b.Property<int>("StopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Stop ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StopId"), 1L, 1);

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StopAddress")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Stop address");

                    b.Property<string>("StopName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Stop name");

                    b.HasKey("StopId");

                    b.ToTable("Stops");
                });

            modelBuilder.Entity("WebApplicationD.Models.UrbanRoute", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Route ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RouteId"), 1L, 1);

                    b.Property<int>("MovementInterval")
                        .HasColumnType("int")
                        .HasColumnName("Movement interval");

                    b.Property<string>("RouteIndex")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("Route index");

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Route name");

                    b.Property<int>("RouteNumber")
                        .HasColumnType("int")
                        .HasColumnName("Route number");

                    b.Property<TimeSpan>("TimeOfDepartureFromTheLine")
                        .HasColumnType("time")
                        .HasColumnName("Time of departure from the line");

                    b.Property<TimeSpan>("TimeToGetOnTheLine")
                        .HasColumnType("time")
                        .HasColumnName("Time to get on the line");

                    b.HasKey("RouteId")
                        .HasName("PK__Urban ro__81A3588D35C7F357");

                    b.ToTable("Urban routes", (string)null);
                });

            modelBuilder.Entity("WebApplicationD.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<bool?>("ActiveUserAccount")
                        .HasColumnType("bit")
                        .HasColumnName("Active user account");

                    b.Property<bool?>("ConfirmedEntry")
                        .HasColumnType("bit")
                        .HasColumnName("Confirmed entry");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RoleInTheSystem")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Role in the system");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "Login" }, "UQ__Users__5E55825B6FEA7073")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebApplicationD.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Vehicle ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("money");

                    b.Property<int>("EnginePower")
                        .HasColumnType("int")
                        .HasColumnName("Engine power");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OnBoardNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("On-board number");

                    b.Property<int>("PassengerCapacity")
                        .HasColumnType("int")
                        .HasColumnName("Passenger capacity");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PurposeOfTheVehicle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Purpose of the vehicle");

                    b.Property<string>("StateNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("State number");

                    b.Property<string>("VehicleClass")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Vehicle class");

                    b.Property<DateTime>("YearOfManufacture")
                        .HasColumnType("date")
                        .HasColumnName("Year of manufacture");

                    b.HasKey("VehicleId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("WebApplicationD.Models.CategoriesOfDriverSLicense", b =>
                {
                    b.HasOne("WebApplicationD.Models.Driver", "Driver")
                        .WithMany("CategoriesOfDriverSLicenses")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Categorie__Drive__2D27B809");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("WebApplicationD.Models.Driver", b =>
                {
                    b.HasOne("WebApplicationD.Models.User", "User")
                        .WithMany("Drivers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Drivers__User ID__2A4B4B5E");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplicationD.Models.DriverStatus", b =>
                {
                    b.HasOne("WebApplicationD.Models.Driver", "Driver")
                        .WithMany("DriverStatuses")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Driver st__Drive__300424B4");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("WebApplicationD.Models.EmployeeStatus", b =>
                {
                    b.HasOne("WebApplicationD.Models.staff", "Employee")
                        .WithMany("EmployeeStatuses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Employee __Emplo__37A5467C");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("WebApplicationD.Models.Flight", b =>
                {
                    b.HasOne("WebApplicationD.Models.Driver", "Driver")
                        .WithMany("Flights")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Flights__Driver __4AB81AF0");

                    b.HasOne("WebApplicationD.Models.UrbanRoute", "Route")
                        .WithMany("Flights")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Flights__Route I__4BAC3F29");

                    b.HasOne("WebApplicationD.Models.Vehicle", "Vehicle")
                        .WithMany("Flights")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Flights__Vehicle__4CA06362");

                    b.Navigation("Driver");

                    b.Navigation("Route");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("WebApplicationD.Models.FlightsStatus", b =>
                {
                    b.HasOne("WebApplicationD.Models.Flight", "Flight")
                        .WithMany("FlightsStatuses")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Flights s__Fligh__4F7CD00D");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("WebApplicationD.Models.Passenger", b =>
                {
                    b.HasOne("WebApplicationD.Models.User", "User")
                        .WithMany("Passengers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Passenger__User __3C69FB99");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplicationD.Models.Rating", b =>
                {
                    b.HasOne("WebApplicationD.Models.Driver", "Driver")
                        .WithMany("Ratings")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Ratings__Driver __5441852A");

                    b.HasOne("WebApplicationD.Models.Passenger", "Passenger")
                        .WithMany("Ratings")
                        .HasForeignKey("PassengerId")
                        .IsRequired()
                        .HasConstraintName("FK__Ratings__Passeng__534D60F1");

                    b.HasOne("WebApplicationD.Models.staff", "ResponsibleEmployeeNavigation")
                        .WithMany("Ratings")
                        .HasForeignKey("ResponsibleEmployee")
                        .IsRequired()
                        .HasConstraintName("FK__Ratings__Respons__5535A963");

                    b.Navigation("Driver");

                    b.Navigation("Passenger");

                    b.Navigation("ResponsibleEmployeeNavigation");
                });

            modelBuilder.Entity("WebApplicationD.Models.RouteStop", b =>
                {
                    b.HasOne("WebApplicationD.Models.UrbanRoute", "Route")
                        .WithMany("RouteStops")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Route Sto__Route__46E78A0C");

                    b.HasOne("WebApplicationD.Models.Stop", "Stop")
                        .WithMany("RouteStops")
                        .HasForeignKey("StopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Route Sto__Stop __47DBAE45");

                    b.Navigation("Route");

                    b.Navigation("Stop");
                });

            modelBuilder.Entity("WebApplicationD.Models.staff", b =>
                {
                    b.HasOne("WebApplicationD.Models.User", "User")
                        .WithMany("staff")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Staff__User ID__34C8D9D1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplicationD.Models.Driver", b =>
                {
                    b.Navigation("CategoriesOfDriverSLicenses");

                    b.Navigation("DriverStatuses");

                    b.Navigation("Flights");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("WebApplicationD.Models.Flight", b =>
                {
                    b.Navigation("FlightsStatuses");
                });

            modelBuilder.Entity("WebApplicationD.Models.Passenger", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("WebApplicationD.Models.staff", b =>
                {
                    b.Navigation("EmployeeStatuses");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("WebApplicationD.Models.Stop", b =>
                {
                    b.Navigation("RouteStops");
                });

            modelBuilder.Entity("WebApplicationD.Models.UrbanRoute", b =>
                {
                    b.Navigation("Flights");

                    b.Navigation("RouteStops");
                });

            modelBuilder.Entity("WebApplicationD.Models.User", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Passengers");

                    b.Navigation("staff");
                });

            modelBuilder.Entity("WebApplicationD.Models.Vehicle", b =>
                {
                    b.Navigation("Flights");
                });
#pragma warning restore 612, 618
        }
    }
}
